import freemarker.core.CollectionAndSequence;
import freemarker.ext.beans.BeanModel;
import freemarker.ext.beans.BeansWrapper;
import freemarker.template.*;
import org.springframework.util.Assert;
public class FetchedResultSetModel extends BeanModel implements TemplateSequenceModel, TemplateScalarModel {
    private final ObjectWrapper objectWrapper;
    private final FetchedResultSet frs;
    public FetchedResultSetModel(FetchedResultSet frs, BeansWrapper objectWrapper) {
        super(frs, objectWrapper);
        this.objectWrapper = objectWrapper;
        this.frs = frs;
    }
    public TemplateModel get(int index) {return new FetchedResultSetRowModel(frs, index, objectWrapper);}
    public int size() {return frs.getRows().size();}
    private static final String TRANSPOSE_METHOD_NAME = "transpose";
    public TemplateModel get(String key) throws TemplateModelException {
        if (key.equals(TRANSPOSE_METHOD_NAME)) {return transpose();}
        return super.get(key);}
    private TemplateMethodModelEx transpose() {
        return args -> {Assert.isTrue(args.isEmpty(), () -> "No arguments needed, but args=" + args);
                return wrap(new FetchedResultSetTransposed(frs));};}
    public TemplateCollectionModel keys() {
        Set<String> keySetEx = super.keySet();
        keySetEx.add(TRANSPOSE_METHOD_NAME);
        return new CollectionAndSequence(new SimpleSequence(keySetEx, objectWrapper));}
    public TemplateCollectionModel values() {return new SimpleCollection(new ArrayList(0), objectWrapper);}
    public String getAsString() {StringBuilder sb = new StringBuilder();
        frs.getColumnLabels().forEach(cl -> sb.append(cl).append('\t'));
        sb.append('\n');
        frs.getRows().forEach(row -> {row.forEach(columnVal -> sb.append(columnVal).append('\t'));
                                        sb.append('\n');});
        return sb.toString();}}                   
----------------------------------------
import freemarker.template.*;
public class FetchedResultSetRowModel extends WrappingTemplateModel implements TemplateSequenceModel, TemplateHashModelEx {
    private final FetchedResultSet resultSet;
    private final int rowIndex;
    FetchedResultSetRowModel(FetchedResultSet frs, int index, ObjectWrapper wrapper) {
        super(wrapper);
        this.resultSet = frs;
        this.rowIndex = index;}
    public TemplateModel get(int index) throws TemplateModelException {return wrap(resultSet.getRows().get(rowIndex).get(index));}
    public TemplateModel get(String key) throws TemplateModelException {return wrap(resultSet.getRows().get(rowIndex).get(resultSet.getColumnIndex(key)));}
    public int size() {return resultSet.getColumnLabels().size();}
    public TemplateCollectionModel keys() {return new SimpleCollection(resultSet.getColumnLabels(), getObjectWrapper());}
    public TemplateCollectionModel values() {return new SimpleCollection(resultSet.getRows().get(rowIndex), getObjectWrapper());}
    public boolean isEmpty() {return false;}}
-----------------
public class FetchedResultSetTransposed {
    private final FetchedResultSet resultSet;
    private final List<List<Object>> transposedData;
    FetchedResultSetTransposed(FetchedResultSet frs) {
        this.resultSet = frs;
        int columnsCount = frs.getMetaData().size();
        List<List<Object>> tempTransposedData = new ArrayList<>();
        this.transposedData = Collections.unmodifiableList(tempTransposedData);
        List<List<Object>> origRows = frs.getRows();
        IntStream.range(0, columnsCount).forEach(
            columnIndex -> {
                List<Object> columnData = new ArrayList<>(origRows.size());
                origRows.forEach(row -> columnData.add(row.get(columnIndex)));
                tempTransposedData.add(Collections.unmodifiableList(columnData));});}
    public List<List<Object>> getTransposedData() {return transposedData;}
    FetchedResultSet getResultSet() {return resultSet;}}
----------------------------------------
import freemarker.template.*;
public class FetchedResultSetTransposedModel extends WrappingTemplateModel
    implements TemplateSequenceModel, TemplateHashModelEx {
    private final FetchedResultSetTransposed frst;
    public FetchedResultSetTransposedModel(FetchedResultSetTransposed frst, ObjectWrapper wrapper) {
        super(wrapper);
        this.frst = frst;}
    public TemplateModel get(int columnIndex) throws TemplateModelException {return wrap(frst.getTransposedData().get(columnIndex));}
    public TemplateModel get(String key) throws TemplateModelException {return wrap(frst.getTransposedData().get(frst.getResultSet().getColumnIndex(key)));}
    public int size() {return frst.getTransposedData().size();}
    public TemplateCollectionModel keys() {return new SimpleCollection(frst.getResultSet().getColumnLabels(), getObjectWrapper());}
    public TemplateCollectionModel values() {return new SimpleCollection(frst.getTransposedData(), getObjectWrapper());}
    public boolean isEmpty() {return frst.getTransposedData().isEmpty();}}       
------------------------StructModel не измененно--------------------------
package sfqtl.ext.sql;
import org.junit.platform.commons.util.ExceptionUtils;
import org.springframework.util.Assert;
import sfqtl.Sfqt2lException;
import java.lang.reflect.Field;
import java.sql.Types;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;
public class TypeHelper {
    private TypeHelper() { }
    // Map of SQL type names to their int values.
    private static final Map<String, Object> encoder = new HashMap<>();
    static {
        Field[] fields = Types.class.getFields();
        for (Field field : fields) {
            try {
                String name = field.getName();
                Object value = field.get(null);
                if (value instanceof Integer) {
                    encoder.put(name, value);
                }
            } catch (IllegalAccessException e) {
                throw new Sfqt2lException("Unable to create map of SQL type names to int values", e);
            }
        }
    }
    public static Integer getIntValue(String typeName) {
        Integer ret = (Integer) encoder.get(typeName);
        if (ret == null) {
            ret = extractConstant(typeName);
            encoder.put(typeName, ret);
        }
        return ret;
    }
    private static Integer extractConstant(String typeName) {
        int lastDotPos = typeName.lastIndexOf('.');
        Assert.isTrue(
            lastDotPos >= 1,
            () ->
                "Type constant is not member of " + Types.class.getName()
                + " and its name is not fully specified: " + typeName
        );
        String className = typeName.substring(0, lastDotPos);
        String fieldName = typeName.substring(lastDotPos + 1);
        Integer val = reflectionOp(className, fieldName);
        if (val == null) throw new NullPointerException(typeName);
        return val;
    }
    private static Integer reflectionOp(String className, String fieldName) {
        try {
            Class cls = Class.forName(className);
            return (Integer) cls.getField(fieldName).get(null);
        } catch (Exception e) {
            throw ExceptionUtils.throwAsUncheckedException(e);
        }
    }
    public static java.util.Date toSQLDate(java.util.Date date) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);
        long millis = cal.getTimeInMillis();
        boolean hasTimePart =
            cal.get(Calendar.HOUR_OF_DAY) + cal.get(Calendar.MINUTE)
            + cal.get(Calendar.SECOND) + cal.get(Calendar.MILLISECOND) != 0;
        return hasTimePart ? new java.sql.Timestamp(millis) : new java.sql.Date(millis);
    }
}
-----------------
package sfqtl;

import freemarker.cache.ClassTemplateLoader;
import freemarker.cache.NullCacheStorage;
import freemarker.ext.beans.BeansWrapperBuilder;
import freemarker.template.*;
import org.springframework.jdbc.core.JdbcOperations;
import org.springframework.util.Assert;
import sfqtl.ext.FtlDefaultObjectWrapper;
import sfqtl.ext.SharedHash;
import sfqtl.ext.sql.ConnectionAdapter;

import java.io.IOException;
import java.io.StringWriter;
import java.io.Writer;

public class Sfqt2lProcessor extends Configuration {
    private final ConnectionAdapter defaultConnection;
    public Sfqt2lProcessor(JdbcOperations jdbcOperations) {
        super(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS);
        this.defaultConnection = new ConnectionAdapter(this, jdbcOperations);
        // Set default settings
        setObjectWrapper(new FtlDefaultObjectWrapper(this.getIncompatibleImprovements()));
        setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
        setLocalizedLookup(false);
        this.setTemplateLoader(new ClassTemplateLoader(this.getClass(), "/"));
        this.setLocalizedLookup(false);
        setDefaultEncoding("UTF8");
        setNumberFormat("computer");
        setDateFormat("yyyy-MM-dd");
        setDateTimeFormat("yyyy-MM-dd HH:mm:ss");
        setCacheStorage(new NullCacheStorage());
        // Register user-defined variables and methods
        registerSharedVar("shared_hash", new SharedHash());
        registerSharedVar("static", getGetStaticMethod());
        setSharedVariable("default_connection", getGetDefaultConnectionMethod());
    }
    @Override
    public Template getTemplate(String templateName) {
        try {
            return super.getTemplate(templateName);
        } catch (IOException e) {
            throw new Sfqt2lException(String.format("Unable to get template '%s'", templateName), e);
        }
    }
    public Template getTemplateFromString(String templateName, String templateBody) {
        if (templateBody == null) {
            throw new IllegalArgumentException("Template body is null");
        }
        final Template template;
        try {
            template = new Template(templateName, templateBody, this);
        } catch (IOException e) {
            throw new Sfqt2lException("Unable to create template from pure ftl text", e);
        }
        return template;
    }
    public String process(Template template, Object...args) {
        StringWriter sw = new StringWriter();
        process(template, sw, args);
        return sw.toString();
    }
    public void process(Template template, Writer dest, Object...args) {
        SimpleHash root = new SimpleHash(getFtlDefaultObjectWrapper());
        registerSharedVar("template_args", args);
        try {
            template.process(root, dest);
        } catch (IOException | TemplateException e) {
            throw new Sfqt2lException("ftl processing exception", e);
        }
    }
    public void registerSharedVar(String name, Object val) {
        try{
            setSharedVariable(name, val);
        } catch(TemplateModelException e){
            throw new Sfqt2lException("Unable to register " + name + " variable", e);
        }
    }
    public FtlDefaultObjectWrapper getFtlDefaultObjectWrapper() {
        return (FtlDefaultObjectWrapper) this.getObjectWrapper();
    }
    private TemplateMethodModelEx getGetDefaultConnectionMethod() {
        return
            args -> {
                Assert.isTrue(
                    args.isEmpty(),
                    () -> "Wrong number of arguments: expected 0, got " + args.size()
                );
                return defaultConnection;
            };
    }
    private TemplateMethodModelEx getGetStaticMethod() {
        return
            args -> {
                Assert.isTrue(args.size() == 1, () -> "Wrong number of arguments: expected 1, got " + args.size());
                Object classNameObj = args.get(0);
                Assert.isTrue(
                    classNameObj instanceof TemplateScalarModel,
                    () -> "Illegal type of argument #1: expected string, got " + classNameObj.getClass().getName()
                );
                return
                    new BeansWrapperBuilder(getIncompatibleImprovements()).build()
                        .getStaticModels().get(((TemplateScalarModel) classNameObj).getAsString());
            };
    }
}
--------------sfqtl\orasql.ftl---------------------
